// Austin Food Club Prisma Schema
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  supabaseId    String    @unique
  email         String?   @unique
  phone         String?   @unique
  name          String
  avatar        String?   // URL for user avatar (from OAuth providers)
  provider      String?   // "email", "google", "apple", etc.
  emailVerified Boolean   @default(false)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  
  // Relations
  rsvps          RSVP[]
  wishlists      Wishlist[]
  verifiedVisits VerifiedVisit[]
  friendships    Friendship[] @relation("UserFriendships")
  friendOf       Friendship[] @relation("FriendOf")
  
  @@map("users")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  cuisine     String
  price       String   // e.g., "$", "$$", "$$$"
  area        String   // e.g., "East Austin", "South Austin"
  description String?
  address     String
  imageUrl    String?
  weekOf      DateTime // The week this restaurant is featured
  createdAt   DateTime @default(now())
  
  // Yelp integration fields
  yelpId      String?  @unique
  rating      Float?
  reviewCount Int?
  photos      Json?    // Array of photo URLs as JSON
  categories  Json?    // Array of category strings as JSON
  priceRange  String?  // Yelp price range (Budget, Moderate, etc.)
  coordinates Json?    // { latitude: Float, longitude: Float }
  hours       Json?    // Business hours object
  isClaimed   Boolean? @default(false)
  yelpUrl     String?
  lastSynced  DateTime? // When this restaurant was last synced with Yelp
  isCurrentPick Boolean? @default(false) // Is this the current week's featured restaurant
  
  // Relations
  rsvps              RSVP[]
  wishlists          Wishlist[]
  verifiedVisits     VerifiedVisit[]
  featuredRestaurants FeaturedRestaurant[]
  
  @@map("restaurants")
}

model RSVP {
  id           String   @id @default(cuid())
  userId       String
  restaurantId String
  day          String   // e.g., "monday", "tuesday", etc.
  status       String   // "going", "maybe", "not_going"
  createdAt    DateTime @default(now())
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Ensure one RSVP per user per restaurant per day
  @@unique([userId, restaurantId, day])
  @@map("rsvps")
}

model Wishlist {
  id           String   @id @default(cuid())
  userId       String
  restaurantId String
  addedAt      DateTime @default(now())
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Ensure one wishlist entry per user per restaurant
  @@unique([userId, restaurantId])
  @@map("wishlists")
}

model VerifiedVisit {
  id           String   @id @default(cuid())
  userId       String
  restaurantId String
  photoUrl     String?
  photo        String?  // Base64 encoded photo data
  rating       Int?     // 1-5 star rating
  review       String?  // Optional text review
  visitDate    DateTime
  createdAt    DateTime @default(now())
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@map("verified_visits")
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   // "pending", "accepted", "blocked"
  createdAt DateTime @default(now())
  
  // Relations
  user   User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  
  // Ensure unique friendship pairs
  @@unique([userId, friendId])
  @@map("friendships")
}

model FeaturedRestaurant {
  id                String    @id @default(cuid())
  restaurantId      String
  weekStartDate     DateTime
  weekEndDate       DateTime
  customDescription String?   // For special themes or events
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Ensure one active featured restaurant per week
  @@unique([weekStartDate, isActive])
  @@map("featured_restaurants")
}
