name: Deploy Austin Food Club

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: austin-food-club-backend
  ECS_SERVICE: austin-food-club-backend
  ECS_CLUSTER: austin-food-club-cluster
  CLOUDFRONT_DISTRIBUTION_ID: ES2T3ZG4KAC0C
  S3_BUCKET: austinfoodclub-frontend

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'

    - name: Install dependencies
      run: |
        cd mobile
        flutter pub get

    - name: Build Flutter web
      run: |
        cd mobile
        flutter build web --release

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync mobile/build/web/ s3://$S3_BUCKET --region $AWS_REGION

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
          --paths '/*'

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üåê Frontend: https://austinfoodclub.com"
        echo "üîó Backend: http://ECSAus-Backe-9BcJbVFKkgWJ-1172628832.us-east-1.elb.amazonaws.com"
    
    - name: Notify Failure
      if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for details."

