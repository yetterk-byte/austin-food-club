name: Build and Deploy Backend (ECR + ECS)

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1
      ECR_REPO: austin-food-club-backend
      ECS_CLUSTER: austin-food-club-cluster
      ECS_SERVICE: austin-food-club-backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-name "$ECR_REPO" --region "$AWS_REGION" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPO" --region "$AWS_REGION"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get AWS account ID
        id: acct
        run: echo "id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Set image tags
        id: tags
        run: |
          ECR_URI=${{ steps.acct.outputs.id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
          SHA_TAG=${GITHUB_SHA::7}
          echo "uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "latest=$ECR_URI:latest" >> $GITHUB_OUTPUT
          echo "sha=$ECR_URI:$SHA_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.tags.outputs.latest }}
            ${{ steps.tags.outputs.sha }}

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --force-new-deployment \
            --region "$AWS_REGION"


